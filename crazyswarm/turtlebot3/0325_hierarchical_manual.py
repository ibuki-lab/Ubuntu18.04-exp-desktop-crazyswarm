#!/user/bin/env python
# coding: UTF-8

#------------------ はじめに ------------------#

# このマニュアルは階層型協調制御の実験方法を示したものです
# ターミナルが何番目かをしっかりと確認しながら, 手順を進めてください
# 下記のようなコマンドを順に追っていってください

""" $ コマンド """

#------------------ ショートカット ------------------#

# Linux PCにおいては「Ctrl+Alt+T」で新たなターミナルを生成できます
# VSCodeにおいては1つのターミナルを開いたあとに, そのターミナルを選択し「Ctrl+Shift+5」でターミナルを複製できます


################################### 階層型協調制御(下位層が被覆制御のパターン) ###################################

#------------------------------------------ 上位層(Turtlebot3)の準備 -------------------------------------------#
# ros masterをたてる(ターミナル1つ目)
""" $ roscore """
#---------------------------------------------------------------------------------------------------------------#
# turtlebot3を起動する
# turtlebot3をフィールドの第一象限に置く
# sshでturtlebot3に接続する(ターミナル2つ目)
# 電源をつけてから, 多少時間が経ったあとに接続できるようになる
""" $ ssh ubuntu@192.168.0.166(burger) """
""" $ ssh ubuntu@192.168.0.230(waffle) """
""" $ PW: turtlebot                    """
# turtlebot3が情報を受け取れる状態にする(ターミナル2つ目)
# 上手く接続できれば「Calibration end」という表示がされる
""" $ roslaunch turtlebot3_bringup turtlebot3_robot.launch """
#---------------------------------------------------------------------------------------------------------------#
# optitrackから情報を得る(ターミナル3つ目)
# キャリブレーション/2022-1-7/CalibrationResult seto 2022-01-07 2.calを開く
# View/Data Streaming PaneZup/Up AxisがZupになっていることを確認する
""" $ roslaunch mocap_optitrack mocap.launch """
#---------------------------------------------------------------------------------------------------------------#
# 以下のコマンドは行う必要がないが, optitrackから位置情報が送られているかどうかを確認することができる(ターミナル4つ目)
""" $ rostopic echo /mocap_node/turtlebot3/pose """
#---------------------------------------------------------------------------------------------------------------#
# 所望の円軌道追従を行うプログラムを始動する(ターミナル5つ目)
# crazyflie側のプログラムを先に実行し, 上で被覆制御が完成したら, この円軌道追従のプログラムを実行すること
# 時間経過でプログラムが終わる仕様になっていないので, 終了したい際は「Ctrl+C」をターミナル5つ目に打ち込む
""" $ rosrun turtlebot3_ros 0323_shift_circle_zup.py """
# プログラムを終了した際に速度のログが残ってしまうので, 下記のどちらかのコマンドをtabキーを活用しながら打つ必要がある(ターミナル5つ目)
""" $ roslaunch turtlebot3_teleop turtlebot3_teleop_key.launch """
""" $ rostopic pub /cmd_vel geometry_msgs/Twist "linear: x: 0.0 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: 0.0" """
# この5つ目のターミナルにおいて, 時間経過で起こるこちらからの命令が何も送ることができないバグが発見されている(2022/3/25時点)
# 例えば, 上記の$ roslaunch turtlebot3_teleop turtlebot3_teleop_key.launchによるキーボード操作が不可能であるなど
# 対処法としては, 5つ目のターミナルを削除し, 新たなターミナルで上記のコマンドを打ちなおすことである
#---------------------------------------------------------------------------------------------------------------#


#------------------------------------------- 下位層(crazyflie)の準備 --------------------------------------------#
# キャリブレーション/2022-1-7/CalibrationResult seto 2022-01-07 2.calを開く(turtlebot3側のときに開いている場合はそのまま)
# 用いてるキャリブレーションの原点が(x,y)=(-1.5,-1.5)の場所にあるので, crazyflieの初期位置に気を付けながら, crazyflieを配置する
# crazyflieの初期位置はホーム/crazyswarm/ros_ws/src/crazyswarm/launch/allCrazyflies.yamlで参照する
# 用いるcrazyflieのペアは「cf1,2,5,6」を推奨する(充電がなくなった場合はallCrazyflies.yamlで初期位置を変更し,「cf3,4,7,8」のペアで行うことを推奨する)
# allCrazyflies.yamlで初期位置を変更する際は, 「cf3,4,7,8」の今までの初期位置のものをコメントアウトし, コメントアウトされているものを解除する
# また, 「cf1,2,5,6」の初期位置もコメントアウトする必要がある
# 下記は初期位置のイメージ図(○:原点, □:turtlebot3, 1,2,5,6:crazyflie(番号順))
# crazyflieの矢印ぬ向きがPC側から見て, 右向きになるようにする
#  |--------------------------|
#  |            |             水
#  |            |             道
#  |            |  □         |
#  |--------------------------|
#  |  2→    1→|             |
#  |            |             |
#  |○6→    5→|             |
#  |---------- PC側 ----------|
#---------------------------------------------------------------------------------------------------------------#
# 配置するcrazyflieを選択する(ターミナル1つ目)
# cdで移動したあとにchooser.pyを起動する
# 今回の実験で用いるcrazyflieの番号にチェックを入れ, rebootをかける(使用するcrazyflieのみにチェックする)
# batteryの欄から, こまめに電池残量を確認し, 赤い文字(黄色もできれば)が表示された場合は充電を行うこと
# chooser.pyは消しても差し支えない
""" $ cd ~/crazyswarm/ros_ws/src/crazyswarm/scripts/ """
""" $ python chooser.py """
#---------------------------------------------------------------------------------------------------------------#
# optitrackから情報を得る(ターミナル2つ目)
""" $ roslaunch mocap_optitrack mocap.launch """
#---------------------------------------------------------------------------------------------------------------#
# Rvizで位置関係を確認する(ターミナル3つ目)
# 上記のイメージ図のような位置関係になっていればOK(cf1がturtlebot3のマーカと間違えて判定されることがよくあるので注意する)
# Rvizで開かれたタブは閉じないこと
""" $ roslaunch crazyswarm hover_swarm.launch """
#---------------------------------------------------------------------------------------------------------------#
# 所望の円軌道追従を行うプログラムを始動する(ターミナル4つ目)
# 上から, まず実行したい箇所まで移動し, crazyswarmのPATHを通し, 最後にプログラムを実行する
""" $ cd ~/crazyswarm/ros_ws/src/crazyswarm/turtlebot3/ """
""" $ export PYTHONPATH=$PYTHONPATH:~/crazyswarm/ros_ws/src/crazyswarm/scripts """
""" $ python 0207_record_of_sc.py """
#---------------------------------------------------------------------------------------------------------------#
# エラーが起こった際は下記のコマンドをtabキーを活用しながら打ち込む(ターミナル5つ目)
# rosservice call /landくらいでtabキーを用いて, 中身を変更していく
""" $ rosservice call /land "groupMask:0 """
"""   height: 0.02                       """ # height(高さ)は0でも大丈夫である
"""   duration:                          """ # durationa(間隔)
"""   secs: 5                            """ # secs(秒)は0秒にするとほぼ落下と同じになってしまう
"""   nsecs:0"                           """ # nsecs(10^-6秒)
# エラーが起こったあとは以下のコマンドを一度「Ctrl+C」でキャンセルしたあとにもう一度打ち込む必要がある
""" $ roslaunch mocap_optitrack mocap.launch """
""" $ roslaunch crazyswarm hover_swarm.launch """
# また, chooser.pyでreboot(再起動)を行う必要がある
""" $ python chooser.py """
#---------------------------------------------------------------------------------------------------------------#


################################### 階層型協調制御(下位層が合意制御のパターン) ###################################

#------------------------------------------ 上位層(Turtlebot3)の準備 -------------------------------------------#
# ros masterをたてる(ターミナル1つ目)
""" $ roscore """
#---------------------------------------------------------------------------------------------------------------#
# turtlebot3を起動する
# turtlebot3をフィールドの第一象限に置く
# sshでturtlebot3に接続する(ターミナル2つ目)
# 電源をつけてから, 多少時間が経ったあとに接続できるようになる
""" $ ssh ubuntu@192.168.0.166(burger) """
""" $ ssh ubuntu@192.168.0.230(waffle) """
""" $ PW: turtlebot                    """
# turtlebot3が情報を受け取れる状態にする(ターミナル2つ目)
# 上手く接続できれば「Calibration end」という表示がされる
""" $ roslaunch turtlebot3_bringup turtlebot3_robot.launch """
#---------------------------------------------------------------------------------------------------------------#
# optitrackから情報を得る(ターミナル3つ目)
# キャリブレーション/2022-1-7/CalibrationResult seto 2022-01-07 2.calを開く
# View/Data Streaming PaneZup/Up AxisがZupになっていることを確認する
""" $ roslaunch mocap_optitrack mocap.launch """
#---------------------------------------------------------------------------------------------------------------#
# 以下のコマンドは行う必要がないが, optitrackから位置情報が送られているかどうかを確認することができる(ターミナル4つ目)
""" $ rostopic echo /mocap_node/turtlebot3/pose """
#---------------------------------------------------------------------------------------------------------------#
# 所望の円軌道追従を行うプログラムを始動する(ターミナル5つ目)
# crazyflie側のプログラムを先に実行し, 上で合意制御が完成したら, この円軌道追従のプログラムを実行すること
# 時間経過でプログラムが終わる仕様になっていないので, 終了したい際は「Ctrl+C」をターミナル5つ目に打ち込む
""" $ rosrun turtlebot3_ros 0323_shift_circle_zup.py """
# プログラムを終了した際に速度のログが残ってしまうので, 下記のどちらかのコマンドをtabキーを活用しながら打つ必要がある(ターミナル5つ目)
""" $ roslaunch turtlebot3_teleop turtlebot3_teleop_key.launch """
""" $ rostopic pub /cmd_vel geometry_msgs/Twist "linear: x: 0.0 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: 0.0" """
# この5つ目のターミナルにおいて, 時間経過で起こるこちらからの命令が何も送ることができないバグが発見されている(2022/3/25時点)
# 例えば, 上記の$ roslaunch turtlebot3_teleop turtlebot3_teleop_key.launchによるキーボード操作が不可能であるなど
# 対処法としては, 5つ目のターミナルを削除し, 新たなターミナルで上記のコマンドを打ちなおすことである
#---------------------------------------------------------------------------------------------------------------#

#------------------------------------------- 下位層(crazyflie)の準備 --------------------------------------------#
# キャリブレーション/2022-1-7/CalibrationResult seto 2022-01-07 2.calを開く(turtlebot3側のときに開いている場合はそのまま)
# 用いてるキャリブレーションの原点が(x,y)=(-1.5,-1.5)の場所にあるので, crazyflieの初期位置に気を付けながら, crazyflieを配置する
# crazyflieの初期位置はホーム/crazyswarm/ros_ws/src/crazyswarm/launch/allCrazyflies.yamlで参照する
# 用いるcrazyflieのペアは「cf1,2,5(or 6)」を推奨する(充電がなくなった場合はallCrazyflies.yamlで初期位置を変更し,「cf3,4,7(or 8)」のペアで行うことを推奨する)
# allCrazyflies.yamlで初期位置を変更する際は, 「cf3,4,7(or 8)」の今までの初期位置のものをコメントアウトし, コメントアウトされているものを解除する
# また, 「cf1,2,5(or 6)」の初期位置もコメントアウトする必要がある
# 下記は初期位置のイメージ図(○:原点, □:turtlebot3, 1,2,5:crazyflie(番号順))
# crazyflieの矢印ぬ向きがPC側から見て, 右向きになるようにする
#  |--------------------------|
#  |            |             水
#  |            |             道
#  |            |  □         |
#  |--------------------------|
#  |  2→    1→|             |
#  |            |             |
#  |○       5→|             |
#  |---------- PC側 ----------|
#---------------------------------------------------------------------------------------------------------------#
# 配置するcrazyflieを選択する(ターミナル1つ目)
# cdで移動したあとにchooser.pyを起動する
# 今回の実験で用いるcrazyflieの番号にチェックを入れ, rebootをかける(使用するcrazyflieのみにチェックする)
# batteryの欄から, こまめに電池残量を確認し, 赤い文字(黄色もできれば)が表示された場合は充電を行うこと
# chooser.pyは消しても差し支えない
""" $ cd ~/crazyswarm/ros_ws/src/crazyswarm/scripts/ """
""" $ python chooser.py """
#---------------------------------------------------------------------------------------------------------------#
# optitrackから情報を得る(ターミナル2つ目)
""" $ roslaunch mocap_optitrack mocap.launch """
#---------------------------------------------------------------------------------------------------------------#
# Rvizで位置関係を確認する(ターミナル3つ目)
# 上記のイメージ図のような位置関係になっていればOK(cf1がturtlebot3のマーカと間違えて判定されることがよくあるので注意する)
# Rvizで開かれたタブは閉じないこと
""" $ roslaunch crazyswarm hover_swarm.launch """
#---------------------------------------------------------------------------------------------------------------#
# 所望の円軌道追従を行うプログラムを始動する(ターミナル4つ目)
# 上から, まず実行したい箇所まで移動し, crazyswarmのPATHを通し, 最後にプログラムを実行する
# プログラムはグラフラプラシアンの箇所を変更することで, 差異を確認することでできる
""" $ cd ~/crazyswarm/ros_ws/src/crazyswarm/turtlebot3/ """
""" $ export PYTHONPATH=$PYTHONPATH:~/crazyswarm/ros_ws/src/crazyswarm/scripts """
""" $ python 0206_record_of_sl.py """
#---------------------------------------------------------------------------------------------------------------#
# エラーが起こった際は下記のコマンドをtabキーを活用しながら打ち込む(ターミナル5つ目)
# rosservice call /landくらいでtabキーを用いて, 中身を変更していく
""" $ rosservice call /land "groupMask:0 """
"""   height: 0.02                       """ # height(高さ)は0でも大丈夫である
"""   duration:                          """ # durationa(間隔)
"""   secs: 5                            """ # secs(秒)は0秒にするとほぼ落下と同じになってしまう
"""   nsecs:0"                           """ # nsecs(10^-6秒)
# エラーが起こったあとは以下のコマンドを一度「Ctrl+C」でキャンセルしたあとにもう一度打ち込む必要がある
""" $ roslaunch mocap_optitrack mocap.launch """
""" $ roslaunch crazyswarm hover_swarm.launch """
# また, chooser.pyでreboot(再起動)を行う必要がある
""" $ python chooser.py """
#---------------------------------------------------------------------------------------------------------------#