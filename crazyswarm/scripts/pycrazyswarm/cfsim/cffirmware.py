# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cffirmware')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cffirmware')
    _cffirmware = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cffirmware', [dirname(__file__)])
        except ImportError:
            import _cffirmware
            return _cffirmware
        try:
            _mod = imp.load_module('_cffirmware', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cffirmware = swig_import_helper()
    del swig_import_helper
else:
    import _cffirmware
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class collision_avoidance_params_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, collision_avoidance_params_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, collision_avoidance_params_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ellipsoidRadii"] = _cffirmware.collision_avoidance_params_t_ellipsoidRadii_set
    __swig_getmethods__["ellipsoidRadii"] = _cffirmware.collision_avoidance_params_t_ellipsoidRadii_get
    if _newclass:
        ellipsoidRadii = _swig_property(_cffirmware.collision_avoidance_params_t_ellipsoidRadii_get, _cffirmware.collision_avoidance_params_t_ellipsoidRadii_set)
    __swig_setmethods__["bboxMin"] = _cffirmware.collision_avoidance_params_t_bboxMin_set
    __swig_getmethods__["bboxMin"] = _cffirmware.collision_avoidance_params_t_bboxMin_get
    if _newclass:
        bboxMin = _swig_property(_cffirmware.collision_avoidance_params_t_bboxMin_get, _cffirmware.collision_avoidance_params_t_bboxMin_set)
    __swig_setmethods__["bboxMax"] = _cffirmware.collision_avoidance_params_t_bboxMax_set
    __swig_getmethods__["bboxMax"] = _cffirmware.collision_avoidance_params_t_bboxMax_get
    if _newclass:
        bboxMax = _swig_property(_cffirmware.collision_avoidance_params_t_bboxMax_get, _cffirmware.collision_avoidance_params_t_bboxMax_set)
    __swig_setmethods__["horizonSecs"] = _cffirmware.collision_avoidance_params_t_horizonSecs_set
    __swig_getmethods__["horizonSecs"] = _cffirmware.collision_avoidance_params_t_horizonSecs_get
    if _newclass:
        horizonSecs = _swig_property(_cffirmware.collision_avoidance_params_t_horizonSecs_get, _cffirmware.collision_avoidance_params_t_horizonSecs_set)
    __swig_setmethods__["maxSpeed"] = _cffirmware.collision_avoidance_params_t_maxSpeed_set
    __swig_getmethods__["maxSpeed"] = _cffirmware.collision_avoidance_params_t_maxSpeed_get
    if _newclass:
        maxSpeed = _swig_property(_cffirmware.collision_avoidance_params_t_maxSpeed_get, _cffirmware.collision_avoidance_params_t_maxSpeed_set)
    __swig_setmethods__["sidestepThreshold"] = _cffirmware.collision_avoidance_params_t_sidestepThreshold_set
    __swig_getmethods__["sidestepThreshold"] = _cffirmware.collision_avoidance_params_t_sidestepThreshold_get
    if _newclass:
        sidestepThreshold = _swig_property(_cffirmware.collision_avoidance_params_t_sidestepThreshold_get, _cffirmware.collision_avoidance_params_t_sidestepThreshold_set)
    __swig_setmethods__["maxPeerLocAgeMillis"] = _cffirmware.collision_avoidance_params_t_maxPeerLocAgeMillis_set
    __swig_getmethods__["maxPeerLocAgeMillis"] = _cffirmware.collision_avoidance_params_t_maxPeerLocAgeMillis_get
    if _newclass:
        maxPeerLocAgeMillis = _swig_property(_cffirmware.collision_avoidance_params_t_maxPeerLocAgeMillis_get, _cffirmware.collision_avoidance_params_t_maxPeerLocAgeMillis_set)
    __swig_setmethods__["voronoiProjectionTolerance"] = _cffirmware.collision_avoidance_params_t_voronoiProjectionTolerance_set
    __swig_getmethods__["voronoiProjectionTolerance"] = _cffirmware.collision_avoidance_params_t_voronoiProjectionTolerance_get
    if _newclass:
        voronoiProjectionTolerance = _swig_property(_cffirmware.collision_avoidance_params_t_voronoiProjectionTolerance_get, _cffirmware.collision_avoidance_params_t_voronoiProjectionTolerance_set)
    __swig_setmethods__["voronoiProjectionMaxIters"] = _cffirmware.collision_avoidance_params_t_voronoiProjectionMaxIters_set
    __swig_getmethods__["voronoiProjectionMaxIters"] = _cffirmware.collision_avoidance_params_t_voronoiProjectionMaxIters_get
    if _newclass:
        voronoiProjectionMaxIters = _swig_property(_cffirmware.collision_avoidance_params_t_voronoiProjectionMaxIters_get, _cffirmware.collision_avoidance_params_t_voronoiProjectionMaxIters_set)

    def __init__(self):
        this = _cffirmware.new_collision_avoidance_params_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_collision_avoidance_params_t
    __del__ = lambda self: None
collision_avoidance_params_t_swigregister = _cffirmware.collision_avoidance_params_t_swigregister
collision_avoidance_params_t_swigregister(collision_avoidance_params_t)

class collision_avoidance_state_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, collision_avoidance_state_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, collision_avoidance_state_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lastFeasibleSetPosition"] = _cffirmware.collision_avoidance_state_t_lastFeasibleSetPosition_set
    __swig_getmethods__["lastFeasibleSetPosition"] = _cffirmware.collision_avoidance_state_t_lastFeasibleSetPosition_get
    if _newclass:
        lastFeasibleSetPosition = _swig_property(_cffirmware.collision_avoidance_state_t_lastFeasibleSetPosition_get, _cffirmware.collision_avoidance_state_t_lastFeasibleSetPosition_set)

    def __init__(self):
        this = _cffirmware.new_collision_avoidance_state_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_collision_avoidance_state_t
    __del__ = lambda self: None
collision_avoidance_state_t_swigregister = _cffirmware.collision_avoidance_state_t_swigregister
collision_avoidance_state_t_swigregister(collision_avoidance_state_t)


def collisionAvoidanceUpdateSetpointCore(params, collisionState, nOthers, otherPositions, workspace, setpoint, sensorData, state):
    return _cffirmware.collisionAvoidanceUpdateSetpointCore(params, collisionState, nOthers, otherPositions, workspace, setpoint, sensorData, state)
collisionAvoidanceUpdateSetpointCore = _cffirmware.collisionAvoidanceUpdateSetpointCore
M_PI_F = _cffirmware.M_PI_F
M_1_PI_F = _cffirmware.M_1_PI_F
M_PI_2_F = _cffirmware.M_PI_2_F

def fsqr(x):
    return _cffirmware.fsqr(x)
fsqr = _cffirmware.fsqr

def radians(degrees):
    return _cffirmware.radians(degrees)
radians = _cffirmware.radians

def degrees(radians):
    return _cffirmware.degrees(radians)
degrees = _cffirmware.degrees

def clamp(value, min, max):
    return _cffirmware.clamp(value, min, max)
clamp = _cffirmware.clamp

def fcloseulps(a, b, ulps):
    return _cffirmware.fcloseulps(a, b, ulps)
fcloseulps = _cffirmware.fcloseulps
class vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _cffirmware.vec_x_set
    __swig_getmethods__["x"] = _cffirmware.vec_x_get
    if _newclass:
        x = _swig_property(_cffirmware.vec_x_get, _cffirmware.vec_x_set)
    __swig_setmethods__["y"] = _cffirmware.vec_y_set
    __swig_getmethods__["y"] = _cffirmware.vec_y_get
    if _newclass:
        y = _swig_property(_cffirmware.vec_y_get, _cffirmware.vec_y_set)
    __swig_setmethods__["z"] = _cffirmware.vec_z_set
    __swig_getmethods__["z"] = _cffirmware.vec_z_get
    if _newclass:
        z = _swig_property(_cffirmware.vec_z_get, _cffirmware.vec_z_set)

    def __init__(self, x):
        this = _cffirmware.new_vec(x)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_vec
    __del__ = lambda self: None

    def __repr__(self):
        return "({}, {}, {})".format(self.x, self.y, self.z)

    def __array__(self):
        return np.array([self.x, self.y, self.z])

    def __len__(self):
        return 3

    def __getitem__(self, i):
        if 0 <= i and i < 3:
            return _cffirmware.vindex(self, i)
        else:
            raise IndexError("vec index must be in {0, 1, 2}.")

    # Unary operator overloads.
    def __neg__(self):
        return _cffirmware.vneg(self)

    # Vector-scalar binary operator overloads.
    def __rmul__(self, s):
        return _cffirmware.vscl(s, self)

    def __div__(self, s):
        return self.__truediv__(s)

    def __truediv__(self, s):
        return _cffirmware.vdiv(self, s)

    # Vector-vector binary operator overloads.
    def __add__(self, other):
        return _cffirmware.vadd(self, other)

    def __sub__(self, other):
        return _cffirmware.vsub(self, other)

vec_swigregister = _cffirmware.vec_swigregister
vec_swigregister(vec)


def mkvec(x, y, z):
    return _cffirmware.mkvec(x, y, z)
mkvec = _cffirmware.mkvec

def vrepeat(x):
    return _cffirmware.vrepeat(x)
vrepeat = _cffirmware.vrepeat

def vzero():
    return _cffirmware.vzero()
vzero = _cffirmware.vzero

def vbasis(i):
    return _cffirmware.vbasis(i)
vbasis = _cffirmware.vbasis

def vscl(s, v):
    return _cffirmware.vscl(s, v)
vscl = _cffirmware.vscl

def vneg(v):
    return _cffirmware.vneg(v)
vneg = _cffirmware.vneg

def vdiv(v, s):
    return _cffirmware.vdiv(v, s)
vdiv = _cffirmware.vdiv

def vadd(a, b):
    return _cffirmware.vadd(a, b)
vadd = _cffirmware.vadd

def vsub(a, b):
    return _cffirmware.vsub(a, b)
vsub = _cffirmware.vsub

def vdot(a, b):
    return _cffirmware.vdot(a, b)
vdot = _cffirmware.vdot

def veltmul(a, b):
    return _cffirmware.veltmul(a, b)
veltmul = _cffirmware.veltmul

def veltdiv(a, b):
    return _cffirmware.veltdiv(a, b)
veltdiv = _cffirmware.veltdiv

def veltrecip(a):
    return _cffirmware.veltrecip(a)
veltrecip = _cffirmware.veltrecip

def vmag2(v):
    return _cffirmware.vmag2(v)
vmag2 = _cffirmware.vmag2

def vmag(v):
    return _cffirmware.vmag(v)
vmag = _cffirmware.vmag

def vdist2(a, b):
    return _cffirmware.vdist2(a, b)
vdist2 = _cffirmware.vdist2

def vdist(a, b):
    return _cffirmware.vdist(a, b)
vdist = _cffirmware.vdist

def vnormalize(v):
    return _cffirmware.vnormalize(v)
vnormalize = _cffirmware.vnormalize

def vclampnorm(v, maxnorm):
    return _cffirmware.vclampnorm(v, maxnorm)
vclampnorm = _cffirmware.vclampnorm

def vcross(a, b):
    return _cffirmware.vcross(a, b)
vcross = _cffirmware.vcross

def vprojectunit(a, b_unit):
    return _cffirmware.vprojectunit(a, b_unit)
vprojectunit = _cffirmware.vprojectunit

def vorthunit(a, b_unit):
    return _cffirmware.vorthunit(a, b_unit)
vorthunit = _cffirmware.vorthunit

def vabs(v):
    return _cffirmware.vabs(v)
vabs = _cffirmware.vabs

def vmin(a, b):
    return _cffirmware.vmin(a, b)
vmin = _cffirmware.vmin

def vmax(a, b):
    return _cffirmware.vmax(a, b)
vmax = _cffirmware.vmax

def vclamp(v, lower, upper):
    return _cffirmware.vclamp(v, lower, upper)
vclamp = _cffirmware.vclamp

def vclampabs(v, abs_upper):
    return _cffirmware.vclampabs(v, abs_upper)
vclampabs = _cffirmware.vclampabs

def vmaxelt(v):
    return _cffirmware.vmaxelt(v)
vmaxelt = _cffirmware.vmaxelt

def vminelt(v):
    return _cffirmware.vminelt(v)
vminelt = _cffirmware.vminelt

def vnorm1(v):
    return _cffirmware.vnorm1(v)
vnorm1 = _cffirmware.vnorm1

def veq(a, b):
    return _cffirmware.veq(a, b)
veq = _cffirmware.veq

def vneq(a, b):
    return _cffirmware.vneq(a, b)
vneq = _cffirmware.vneq

def veqepsilon(a, b, epsilon):
    return _cffirmware.veqepsilon(a, b, epsilon)
veqepsilon = _cffirmware.veqepsilon

def vless(a, b):
    return _cffirmware.vless(a, b)
vless = _cffirmware.vless

def vleq(a, b):
    return _cffirmware.vleq(a, b)
vleq = _cffirmware.vleq

def vgreater(a, b):
    return _cffirmware.vgreater(a, b)
vgreater = _cffirmware.vgreater

def vgeq(a, b):
    return _cffirmware.vgeq(a, b)
vgeq = _cffirmware.vgeq

def visnan(v):
    return _cffirmware.visnan(v)
visnan = _cffirmware.visnan

def vadd3(a, b, c):
    return _cffirmware.vadd3(a, b, c)
vadd3 = _cffirmware.vadd3

def vadd4(a, b, c, d):
    return _cffirmware.vadd4(a, b, c, d)
vadd4 = _cffirmware.vadd4

def vsub2(a, b, c):
    return _cffirmware.vsub2(a, b, c)
vsub2 = _cffirmware.vsub2

def vload(d):
    return _cffirmware.vload(d)
vload = _cffirmware.vload

def vstore(v, d):
    return _cffirmware.vstore(v, d)
vstore = _cffirmware.vstore

def vloadf(f):
    return _cffirmware.vloadf(f)
vloadf = _cffirmware.vloadf

def vstoref(v, f):
    return _cffirmware.vstoref(v, f)
vstoref = _cffirmware.vstoref

def vindex(v, i):
    return _cffirmware.vindex(v, i)
vindex = _cffirmware.vindex
class mat33(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mat33, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mat33, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m"] = _cffirmware.mat33_m_set
    __swig_getmethods__["m"] = _cffirmware.mat33_m_get
    if _newclass:
        m = _swig_property(_cffirmware.mat33_m_get, _cffirmware.mat33_m_set)

    def __init__(self):
        this = _cffirmware.new_mat33()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_mat33
    __del__ = lambda self: None
mat33_swigregister = _cffirmware.mat33_swigregister
mat33_swigregister(mat33)


def mzero():
    return _cffirmware.mzero()
mzero = _cffirmware.mzero

def mdiag(a, b, c):
    return _cffirmware.mdiag(a, b, c)
mdiag = _cffirmware.mdiag

def meyescl(a):
    return _cffirmware.meyescl(a)
meyescl = _cffirmware.meyescl

def meye():
    return _cffirmware.meye()
meye = _cffirmware.meye

def mcolumns(a, b, c):
    return _cffirmware.mcolumns(a, b, c)
mcolumns = _cffirmware.mcolumns

def mrows(a, b, c):
    return _cffirmware.mrows(a, b, c)
mrows = _cffirmware.mrows

def mcrossmat(v):
    return _cffirmware.mcrossmat(v)
mcrossmat = _cffirmware.mcrossmat

def mcolumn(m, col):
    return _cffirmware.mcolumn(m, col)
mcolumn = _cffirmware.mcolumn

def mrow(m, row):
    return _cffirmware.mrow(m, row)
mrow = _cffirmware.mrow

def mtranspose(m):
    return _cffirmware.mtranspose(m)
mtranspose = _cffirmware.mtranspose

def mscl(s, a):
    return _cffirmware.mscl(s, a)
mscl = _cffirmware.mscl

def mneg(a):
    return _cffirmware.mneg(a)
mneg = _cffirmware.mneg

def madd(a, b):
    return _cffirmware.madd(a, b)
madd = _cffirmware.madd

def msub(a, b):
    return _cffirmware.msub(a, b)
msub = _cffirmware.msub

def mvmul(a, v):
    return _cffirmware.mvmul(a, v)
mvmul = _cffirmware.mvmul

def mmul(a, b):
    return _cffirmware.mmul(a, b)
mmul = _cffirmware.mmul

def maddridge(a, d):
    return _cffirmware.maddridge(a, d)
maddridge = _cffirmware.maddridge

def misnan(m):
    return _cffirmware.misnan(m)
misnan = _cffirmware.misnan

def set_block33_rowmaj(block, stride, m):
    return _cffirmware.set_block33_rowmaj(block, stride, m)
set_block33_rowmaj = _cffirmware.set_block33_rowmaj

def madd3(a, b, c):
    return _cffirmware.madd3(a, b, c)
madd3 = _cffirmware.madd3

def maxisangle(axis, angle):
    return _cffirmware.maxisangle(axis, angle)
maxisangle = _cffirmware.maxisangle

def mrotx(angle):
    return _cffirmware.mrotx(angle)
mrotx = _cffirmware.mrotx

def mroty(angle):
    return _cffirmware.mroty(angle)
mroty = _cffirmware.mroty

def mrotz(angle):
    return _cffirmware.mrotz(angle)
mrotz = _cffirmware.mrotz
class quat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, quat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, quat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _cffirmware.quat_x_set
    __swig_getmethods__["x"] = _cffirmware.quat_x_get
    if _newclass:
        x = _swig_property(_cffirmware.quat_x_get, _cffirmware.quat_x_set)
    __swig_setmethods__["y"] = _cffirmware.quat_y_set
    __swig_getmethods__["y"] = _cffirmware.quat_y_get
    if _newclass:
        y = _swig_property(_cffirmware.quat_y_get, _cffirmware.quat_y_set)
    __swig_setmethods__["z"] = _cffirmware.quat_z_set
    __swig_getmethods__["z"] = _cffirmware.quat_z_get
    if _newclass:
        z = _swig_property(_cffirmware.quat_z_get, _cffirmware.quat_z_set)
    __swig_setmethods__["w"] = _cffirmware.quat_w_set
    __swig_getmethods__["w"] = _cffirmware.quat_w_get
    if _newclass:
        w = _swig_property(_cffirmware.quat_w_get, _cffirmware.quat_w_set)

    def __init__(self):
        this = _cffirmware.new_quat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_quat
    __del__ = lambda self: None
quat_swigregister = _cffirmware.quat_swigregister
quat_swigregister(quat)


def mkquat(x, y, z, w):
    return _cffirmware.mkquat(x, y, z, w)
mkquat = _cffirmware.mkquat

def quatvw(v, w):
    return _cffirmware.quatvw(v, w)
quatvw = _cffirmware.quatvw

def qeye():
    return _cffirmware.qeye()
qeye = _cffirmware.qeye

def qaxisangle(axis, angle):
    return _cffirmware.qaxisangle(axis, angle)
qaxisangle = _cffirmware.qaxisangle

def qnormalize(q):
    return _cffirmware.qnormalize(q)
qnormalize = _cffirmware.qnormalize

def qvectovec(a, b):
    return _cffirmware.qvectovec(a, b)
qvectovec = _cffirmware.qvectovec

def rpy2quat(rpy):
    return _cffirmware.rpy2quat(rpy)
rpy2quat = _cffirmware.rpy2quat

def rpy2quat_small(rpy):
    return _cffirmware.rpy2quat_small(rpy)
rpy2quat_small = _cffirmware.rpy2quat_small

def mat2quat(m):
    return _cffirmware.mat2quat(m)
mat2quat = _cffirmware.mat2quat

def quat2rpy(q):
    return _cffirmware.quat2rpy(q)
quat2rpy = _cffirmware.quat2rpy

def quat2axis(q):
    return _cffirmware.quat2axis(q)
quat2axis = _cffirmware.quat2axis

def quat2angle(q):
    return _cffirmware.quat2angle(q)
quat2angle = _cffirmware.quat2angle

def quatimagpart(q):
    return _cffirmware.quatimagpart(q)
quatimagpart = _cffirmware.quatimagpart

def quat2rotmat(q):
    return _cffirmware.quat2rotmat(q)
quat2rotmat = _cffirmware.quat2rotmat

def qvrot(q, v):
    return _cffirmware.qvrot(q, v)
qvrot = _cffirmware.qvrot

def qqmul(q, p):
    return _cffirmware.qqmul(q, p)
qqmul = _cffirmware.qqmul

def qinv(q):
    return _cffirmware.qinv(q)
qinv = _cffirmware.qinv

def qneg(q):
    return _cffirmware.qneg(q)
qneg = _cffirmware.qneg

def qposreal(q):
    return _cffirmware.qposreal(q)
qposreal = _cffirmware.qposreal

def qdot(a, b):
    return _cffirmware.qdot(a, b)
qdot = _cffirmware.qdot

def qanglebetween(a, b):
    return _cffirmware.qanglebetween(a, b)
qanglebetween = _cffirmware.qanglebetween

def qeq(a, b):
    return _cffirmware.qeq(a, b)
qeq = _cffirmware.qeq

def quat_gyro_update(quat, gyro, dt):
    return _cffirmware.quat_gyro_update(quat, gyro, dt)
quat_gyro_update = _cffirmware.quat_gyro_update

def qnlerp(a, b, t):
    return _cffirmware.qnlerp(a, b, t)
qnlerp = _cffirmware.qnlerp

def qslerp(a, b, t):
    return _cffirmware.qslerp(a, b, t)
qslerp = _cffirmware.qslerp

def qload(d):
    return _cffirmware.qload(d)
qload = _cffirmware.qload

def qstore(q, d):
    return _cffirmware.qstore(q, d)
qstore = _cffirmware.qstore

def qloadf(f):
    return _cffirmware.qloadf(f)
qloadf = _cffirmware.qloadf

def qstoref(q, f):
    return _cffirmware.qstoref(q, f)
qstoref = _cffirmware.qstoref

def vprojecthalfspace(x, a_unit, b):
    return _cffirmware.vprojecthalfspace(x, a_unit, b)
vprojecthalfspace = _cffirmware.vprojecthalfspace

def vinpolytope(v, A, b, n, tolerance):
    return _cffirmware.vinpolytope(v, A, b, n, tolerance)
vinpolytope = _cffirmware.vinpolytope

def rayintersectpolytope(origin, direction, A, b, n, active_row):
    return _cffirmware.rayintersectpolytope(origin, direction, A, b, n, active_row)
rayintersectpolytope = _cffirmware.rayintersectpolytope

def vprojectpolytope(v, A, b, work, n, tolerance, maxiters):
    return _cffirmware.vprojectpolytope(v, A, b, work, n, tolerance, maxiters)
vprojectpolytope = _cffirmware.vprojectpolytope
PP_DEGREE = _cffirmware.PP_DEGREE
PP_SIZE = _cffirmware.PP_SIZE

def polyval(p, t):
    return _cffirmware.polyval(p, t)
polyval = _cffirmware.polyval

def polylinear(p, duration, x0, x1):
    return _cffirmware.polylinear(p, duration, x0, x1)
polylinear = _cffirmware.polylinear

def polybezier(p, duration, x, dim):
    return _cffirmware.polybezier(p, duration, x, dim)
polybezier = _cffirmware.polybezier

def poly5(poly, T, x0, dx0, ddx0, xf, dxf, ddxf):
    return _cffirmware.poly5(poly, T, x0, dx0, ddx0, xf, dxf, ddxf)
poly5 = _cffirmware.poly5

def polyscale(p, s):
    return _cffirmware.polyscale(p, s)
polyscale = _cffirmware.polyscale

def polyder(p):
    return _cffirmware.polyder(p)
polyder = _cffirmware.polyder

def polystretchtime(p, s):
    return _cffirmware.polystretchtime(p, s)
polystretchtime = _cffirmware.polystretchtime

def polyreflect(p):
    return _cffirmware.polyreflect(p)
polyreflect = _cffirmware.polyreflect
class poly4d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, poly4d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, poly4d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p"] = _cffirmware.poly4d_p_set
    __swig_getmethods__["p"] = _cffirmware.poly4d_p_get
    if _newclass:
        p = _swig_property(_cffirmware.poly4d_p_get, _cffirmware.poly4d_p_set)
    __swig_setmethods__["duration"] = _cffirmware.poly4d_duration_set
    __swig_getmethods__["duration"] = _cffirmware.poly4d_duration_get
    if _newclass:
        duration = _swig_property(_cffirmware.poly4d_duration_get, _cffirmware.poly4d_duration_set)

    def __init__(self):
        this = _cffirmware.new_poly4d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_poly4d
    __del__ = lambda self: None
poly4d_swigregister = _cffirmware.poly4d_swigregister
poly4d_swigregister(poly4d)


def poly4d_zero(duration):
    return _cffirmware.poly4d_zero(duration)
poly4d_zero = _cffirmware.poly4d_zero

def poly4d_linear(duration, p0, p1, yaw0, yaw1):
    return _cffirmware.poly4d_linear(duration, p0, p1, yaw0, yaw1)
poly4d_linear = _cffirmware.poly4d_linear

def poly4d_scale(p, x, y, z, yaw):
    return _cffirmware.poly4d_scale(p, x, y, z, yaw)
poly4d_scale = _cffirmware.poly4d_scale

def poly4d_shift(p, x, y, z, yaw):
    return _cffirmware.poly4d_shift(p, x, y, z, yaw)
poly4d_shift = _cffirmware.poly4d_shift

def poly4d_shift_vec(p, pos, yaw):
    return _cffirmware.poly4d_shift_vec(p, pos, yaw)
poly4d_shift_vec = _cffirmware.poly4d_shift_vec

def poly4d_stretchtime(p, s):
    return _cffirmware.poly4d_stretchtime(p, s)
poly4d_stretchtime = _cffirmware.poly4d_stretchtime

def polyder4d(p):
    return _cffirmware.polyder4d(p)
polyder4d = _cffirmware.polyder4d

def poly4d_max_accel_approx(p):
    return _cffirmware.poly4d_max_accel_approx(p)
poly4d_max_accel_approx = _cffirmware.poly4d_max_accel_approx
class traj_eval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, traj_eval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, traj_eval, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pos"] = _cffirmware.traj_eval_pos_set
    __swig_getmethods__["pos"] = _cffirmware.traj_eval_pos_get
    if _newclass:
        pos = _swig_property(_cffirmware.traj_eval_pos_get, _cffirmware.traj_eval_pos_set)
    __swig_setmethods__["vel"] = _cffirmware.traj_eval_vel_set
    __swig_getmethods__["vel"] = _cffirmware.traj_eval_vel_get
    if _newclass:
        vel = _swig_property(_cffirmware.traj_eval_vel_get, _cffirmware.traj_eval_vel_set)
    __swig_setmethods__["acc"] = _cffirmware.traj_eval_acc_set
    __swig_getmethods__["acc"] = _cffirmware.traj_eval_acc_get
    if _newclass:
        acc = _swig_property(_cffirmware.traj_eval_acc_get, _cffirmware.traj_eval_acc_set)
    __swig_setmethods__["omega"] = _cffirmware.traj_eval_omega_set
    __swig_getmethods__["omega"] = _cffirmware.traj_eval_omega_get
    if _newclass:
        omega = _swig_property(_cffirmware.traj_eval_omega_get, _cffirmware.traj_eval_omega_set)
    __swig_setmethods__["yaw"] = _cffirmware.traj_eval_yaw_set
    __swig_getmethods__["yaw"] = _cffirmware.traj_eval_yaw_get
    if _newclass:
        yaw = _swig_property(_cffirmware.traj_eval_yaw_get, _cffirmware.traj_eval_yaw_set)

    def __init__(self, x):
        this = _cffirmware.new_traj_eval(x)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_traj_eval
    __del__ = lambda self: None
traj_eval_swigregister = _cffirmware.traj_eval_swigregister
traj_eval_swigregister(traj_eval)


def traj_eval_zero():
    return _cffirmware.traj_eval_zero()
traj_eval_zero = _cffirmware.traj_eval_zero

def traj_eval_invalid():
    return _cffirmware.traj_eval_invalid()
traj_eval_invalid = _cffirmware.traj_eval_invalid

def is_traj_eval_valid(ev):
    return _cffirmware.is_traj_eval_valid(ev)
is_traj_eval_valid = _cffirmware.is_traj_eval_valid

def poly4d_eval(p, t):
    return _cffirmware.poly4d_eval(p, t)
poly4d_eval = _cffirmware.poly4d_eval
class piecewise_traj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, piecewise_traj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, piecewise_traj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["t_begin"] = _cffirmware.piecewise_traj_t_begin_set
    __swig_getmethods__["t_begin"] = _cffirmware.piecewise_traj_t_begin_get
    if _newclass:
        t_begin = _swig_property(_cffirmware.piecewise_traj_t_begin_get, _cffirmware.piecewise_traj_t_begin_set)
    __swig_setmethods__["timescale"] = _cffirmware.piecewise_traj_timescale_set
    __swig_getmethods__["timescale"] = _cffirmware.piecewise_traj_timescale_get
    if _newclass:
        timescale = _swig_property(_cffirmware.piecewise_traj_timescale_get, _cffirmware.piecewise_traj_timescale_set)
    __swig_setmethods__["shift"] = _cffirmware.piecewise_traj_shift_set
    __swig_getmethods__["shift"] = _cffirmware.piecewise_traj_shift_get
    if _newclass:
        shift = _swig_property(_cffirmware.piecewise_traj_shift_get, _cffirmware.piecewise_traj_shift_set)
    __swig_setmethods__["n_pieces"] = _cffirmware.piecewise_traj_n_pieces_set
    __swig_getmethods__["n_pieces"] = _cffirmware.piecewise_traj_n_pieces_get
    if _newclass:
        n_pieces = _swig_property(_cffirmware.piecewise_traj_n_pieces_get, _cffirmware.piecewise_traj_n_pieces_set)
    __swig_setmethods__["pieces"] = _cffirmware.piecewise_traj_pieces_set
    __swig_getmethods__["pieces"] = _cffirmware.piecewise_traj_pieces_get
    if _newclass:
        pieces = _swig_property(_cffirmware.piecewise_traj_pieces_get, _cffirmware.piecewise_traj_pieces_set)

    def __init__(self):
        this = _cffirmware.new_piecewise_traj()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_piecewise_traj
    __del__ = lambda self: None
piecewise_traj_swigregister = _cffirmware.piecewise_traj_swigregister
piecewise_traj_swigregister(piecewise_traj)


def piecewise_duration(pp):
    return _cffirmware.piecewise_duration(pp)
piecewise_duration = _cffirmware.piecewise_duration

def piecewise_plan_5th_order(p, duration, p0, y0, v0, dy0, a0, p1, y1, v1, dy1, a1):
    return _cffirmware.piecewise_plan_5th_order(p, duration, p0, y0, v0, dy0, a0, p1, y1, v1, dy1, a1)
piecewise_plan_5th_order = _cffirmware.piecewise_plan_5th_order

def piecewise_plan_7th_order_no_jerk(p, duration, p0, y0, v0, dy0, a0, p1, y1, v1, dy1, a1):
    return _cffirmware.piecewise_plan_7th_order_no_jerk(p, duration, p0, y0, v0, dy0, a0, p1, y1, v1, dy1, a1)
piecewise_plan_7th_order_no_jerk = _cffirmware.piecewise_plan_7th_order_no_jerk

def piecewise_eval(traj, t):
    return _cffirmware.piecewise_eval(traj, t)
piecewise_eval = _cffirmware.piecewise_eval

def piecewise_eval_reversed(traj, t):
    return _cffirmware.piecewise_eval_reversed(traj, t)
piecewise_eval_reversed = _cffirmware.piecewise_eval_reversed

def piecewise_is_finished(traj, t):
    return _cffirmware.piecewise_is_finished(traj, t)
piecewise_is_finished = _cffirmware.piecewise_is_finished
TRAJECTORY_STATE_IDLE = _cffirmware.TRAJECTORY_STATE_IDLE
TRAJECTORY_STATE_FLYING = _cffirmware.TRAJECTORY_STATE_FLYING
TRAJECTORY_STATE_LANDING = _cffirmware.TRAJECTORY_STATE_LANDING
TRAJECTORY_TYPE_PIECEWISE = _cffirmware.TRAJECTORY_TYPE_PIECEWISE
TRAJECTORY_TYPE_PIECEWISE_COMPRESSED = _cffirmware.TRAJECTORY_TYPE_PIECEWISE_COMPRESSED
class planner(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, planner, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, planner, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _cffirmware.planner_state_set
    __swig_getmethods__["state"] = _cffirmware.planner_state_get
    if _newclass:
        state = _swig_property(_cffirmware.planner_state_get, _cffirmware.planner_state_set)
    __swig_setmethods__["type"] = _cffirmware.planner_type_set
    __swig_getmethods__["type"] = _cffirmware.planner_type_get
    if _newclass:
        type = _swig_property(_cffirmware.planner_type_get, _cffirmware.planner_type_set)
    __swig_setmethods__["reversed"] = _cffirmware.planner_reversed_set
    __swig_getmethods__["reversed"] = _cffirmware.planner_reversed_get
    if _newclass:
        reversed = _swig_property(_cffirmware.planner_reversed_get, _cffirmware.planner_reversed_set)
    __swig_setmethods__["trajectory"] = _cffirmware.planner_trajectory_set
    __swig_getmethods__["trajectory"] = _cffirmware.planner_trajectory_get
    if _newclass:
        trajectory = _swig_property(_cffirmware.planner_trajectory_get, _cffirmware.planner_trajectory_set)
    __swig_setmethods__["compressed_trajectory"] = _cffirmware.planner_compressed_trajectory_set
    __swig_getmethods__["compressed_trajectory"] = _cffirmware.planner_compressed_trajectory_get
    if _newclass:
        compressed_trajectory = _swig_property(_cffirmware.planner_compressed_trajectory_get, _cffirmware.planner_compressed_trajectory_set)
    __swig_setmethods__["planned_trajectory"] = _cffirmware.planner_planned_trajectory_set
    __swig_getmethods__["planned_trajectory"] = _cffirmware.planner_planned_trajectory_get
    if _newclass:
        planned_trajectory = _swig_property(_cffirmware.planner_planned_trajectory_get, _cffirmware.planner_planned_trajectory_set)
    __swig_setmethods__["pieces"] = _cffirmware.planner_pieces_set
    __swig_getmethods__["pieces"] = _cffirmware.planner_pieces_get
    if _newclass:
        pieces = _swig_property(_cffirmware.planner_pieces_get, _cffirmware.planner_pieces_set)

    def __init__(self):
        this = _cffirmware.new_planner()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_planner
    __del__ = lambda self: None
planner_swigregister = _cffirmware.planner_swigregister
planner_swigregister(planner)


def plan_init(p):
    return _cffirmware.plan_init(p)
plan_init = _cffirmware.plan_init

def plan_stop(p):
    return _cffirmware.plan_stop(p)
plan_stop = _cffirmware.plan_stop

def plan_is_stopped(p):
    return _cffirmware.plan_is_stopped(p)
plan_is_stopped = _cffirmware.plan_is_stopped

def plan_current_goal(p, t):
    return _cffirmware.plan_current_goal(p, t)
plan_current_goal = _cffirmware.plan_current_goal

def plan_takeoff(p, curr_pos, curr_yaw, hover_height, hover_yaw, duration, t):
    return _cffirmware.plan_takeoff(p, curr_pos, curr_yaw, hover_height, hover_yaw, duration, t)
plan_takeoff = _cffirmware.plan_takeoff

def plan_land(p, curr_pos, curr_yaw, hover_height, hover_yaw, duration, t):
    return _cffirmware.plan_land(p, curr_pos, curr_yaw, hover_height, hover_yaw, duration, t)
plan_land = _cffirmware.plan_land

def plan_go_to(p, relative, hover_pos, hover_yaw, duration, t):
    return _cffirmware.plan_go_to(p, relative, hover_pos, hover_yaw, duration, t)
plan_go_to = _cffirmware.plan_go_to

def plan_go_to_from(p, curr_eval, relative, hover_pos, hover_yaw, duration, t):
    return _cffirmware.plan_go_to_from(p, curr_eval, relative, hover_pos, hover_yaw, duration, t)
plan_go_to_from = _cffirmware.plan_go_to_from

def plan_start_trajectory(p, trajectory, reversed):
    return _cffirmware.plan_start_trajectory(p, trajectory, reversed)
plan_start_trajectory = _cffirmware.plan_start_trajectory

def plan_start_compressed_trajectory(p, trajectory):
    return _cffirmware.plan_start_compressed_trajectory(p, trajectory)
plan_start_compressed_trajectory = _cffirmware.plan_start_compressed_trajectory

def plan_is_finished(p, t):
    return _cffirmware.plan_is_finished(p, t)
plan_is_finished = _cffirmware.plan_is_finished
class attitude_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, attitude_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, attitude_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _cffirmware.attitude_t_timestamp_set
    __swig_getmethods__["timestamp"] = _cffirmware.attitude_t_timestamp_get
    if _newclass:
        timestamp = _swig_property(_cffirmware.attitude_t_timestamp_get, _cffirmware.attitude_t_timestamp_set)
    __swig_setmethods__["roll"] = _cffirmware.attitude_t_roll_set
    __swig_getmethods__["roll"] = _cffirmware.attitude_t_roll_get
    if _newclass:
        roll = _swig_property(_cffirmware.attitude_t_roll_get, _cffirmware.attitude_t_roll_set)
    __swig_setmethods__["pitch"] = _cffirmware.attitude_t_pitch_set
    __swig_getmethods__["pitch"] = _cffirmware.attitude_t_pitch_get
    if _newclass:
        pitch = _swig_property(_cffirmware.attitude_t_pitch_get, _cffirmware.attitude_t_pitch_set)
    __swig_setmethods__["yaw"] = _cffirmware.attitude_t_yaw_set
    __swig_getmethods__["yaw"] = _cffirmware.attitude_t_yaw_get
    if _newclass:
        yaw = _swig_property(_cffirmware.attitude_t_yaw_get, _cffirmware.attitude_t_yaw_set)

    def __init__(self):
        this = _cffirmware.new_attitude_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_attitude_t
    __del__ = lambda self: None
attitude_t_swigregister = _cffirmware.attitude_t_swigregister
attitude_t_swigregister(attitude_t)

vec3d_size = _cffirmware.vec3d_size
class vec3_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec3_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec3_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _cffirmware.vec3_s_timestamp_set
    __swig_getmethods__["timestamp"] = _cffirmware.vec3_s_timestamp_get
    if _newclass:
        timestamp = _swig_property(_cffirmware.vec3_s_timestamp_get, _cffirmware.vec3_s_timestamp_set)
    __swig_setmethods__["x"] = _cffirmware.vec3_s_x_set
    __swig_getmethods__["x"] = _cffirmware.vec3_s_x_get
    if _newclass:
        x = _swig_property(_cffirmware.vec3_s_x_get, _cffirmware.vec3_s_x_set)
    __swig_setmethods__["y"] = _cffirmware.vec3_s_y_set
    __swig_getmethods__["y"] = _cffirmware.vec3_s_y_get
    if _newclass:
        y = _swig_property(_cffirmware.vec3_s_y_get, _cffirmware.vec3_s_y_set)
    __swig_setmethods__["z"] = _cffirmware.vec3_s_z_set
    __swig_getmethods__["z"] = _cffirmware.vec3_s_z_get
    if _newclass:
        z = _swig_property(_cffirmware.vec3_s_z_get, _cffirmware.vec3_s_z_set)

    def __init__(self):
        this = _cffirmware.new_vec3_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_vec3_s
    __del__ = lambda self: None
vec3_s_swigregister = _cffirmware.vec3_s_swigregister
vec3_s_swigregister(vec3_s)

class quaternion_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, quaternion_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, quaternion_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _cffirmware.quaternion_t_timestamp_set
    __swig_getmethods__["timestamp"] = _cffirmware.quaternion_t_timestamp_get
    if _newclass:
        timestamp = _swig_property(_cffirmware.quaternion_t_timestamp_get, _cffirmware.quaternion_t_timestamp_set)
    __swig_setmethods__["q0"] = _cffirmware.quaternion_t_q0_set
    __swig_getmethods__["q0"] = _cffirmware.quaternion_t_q0_get
    if _newclass:
        q0 = _swig_property(_cffirmware.quaternion_t_q0_get, _cffirmware.quaternion_t_q0_set)
    __swig_setmethods__["q1"] = _cffirmware.quaternion_t_q1_set
    __swig_getmethods__["q1"] = _cffirmware.quaternion_t_q1_get
    if _newclass:
        q1 = _swig_property(_cffirmware.quaternion_t_q1_get, _cffirmware.quaternion_t_q1_set)
    __swig_setmethods__["q2"] = _cffirmware.quaternion_t_q2_set
    __swig_getmethods__["q2"] = _cffirmware.quaternion_t_q2_get
    if _newclass:
        q2 = _swig_property(_cffirmware.quaternion_t_q2_get, _cffirmware.quaternion_t_q2_set)
    __swig_setmethods__["q3"] = _cffirmware.quaternion_t_q3_set
    __swig_getmethods__["q3"] = _cffirmware.quaternion_t_q3_get
    if _newclass:
        q3 = _swig_property(_cffirmware.quaternion_t_q3_get, _cffirmware.quaternion_t_q3_set)
    __swig_setmethods__["x"] = _cffirmware.quaternion_t_x_set
    __swig_getmethods__["x"] = _cffirmware.quaternion_t_x_get
    if _newclass:
        x = _swig_property(_cffirmware.quaternion_t_x_get, _cffirmware.quaternion_t_x_set)
    __swig_setmethods__["y"] = _cffirmware.quaternion_t_y_set
    __swig_getmethods__["y"] = _cffirmware.quaternion_t_y_get
    if _newclass:
        y = _swig_property(_cffirmware.quaternion_t_y_get, _cffirmware.quaternion_t_y_set)
    __swig_setmethods__["z"] = _cffirmware.quaternion_t_z_set
    __swig_getmethods__["z"] = _cffirmware.quaternion_t_z_get
    if _newclass:
        z = _swig_property(_cffirmware.quaternion_t_z_get, _cffirmware.quaternion_t_z_set)
    __swig_setmethods__["w"] = _cffirmware.quaternion_t_w_set
    __swig_getmethods__["w"] = _cffirmware.quaternion_t_w_get
    if _newclass:
        w = _swig_property(_cffirmware.quaternion_t_w_get, _cffirmware.quaternion_t_w_set)

    def __init__(self):
        this = _cffirmware.new_quaternion_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_quaternion_t
    __del__ = lambda self: None
quaternion_t_swigregister = _cffirmware.quaternion_t_swigregister
quaternion_t_swigregister(quaternion_t)

class tdoaMeasurement_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tdoaMeasurement_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tdoaMeasurement_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["anchorPosition"] = _cffirmware.tdoaMeasurement_t_anchorPosition_set
    __swig_getmethods__["anchorPosition"] = _cffirmware.tdoaMeasurement_t_anchorPosition_get
    if _newclass:
        anchorPosition = _swig_property(_cffirmware.tdoaMeasurement_t_anchorPosition_get, _cffirmware.tdoaMeasurement_t_anchorPosition_set)
    __swig_setmethods__["distanceDiff"] = _cffirmware.tdoaMeasurement_t_distanceDiff_set
    __swig_getmethods__["distanceDiff"] = _cffirmware.tdoaMeasurement_t_distanceDiff_get
    if _newclass:
        distanceDiff = _swig_property(_cffirmware.tdoaMeasurement_t_distanceDiff_get, _cffirmware.tdoaMeasurement_t_distanceDiff_set)
    __swig_setmethods__["stdDev"] = _cffirmware.tdoaMeasurement_t_stdDev_set
    __swig_getmethods__["stdDev"] = _cffirmware.tdoaMeasurement_t_stdDev_get
    if _newclass:
        stdDev = _swig_property(_cffirmware.tdoaMeasurement_t_stdDev_get, _cffirmware.tdoaMeasurement_t_stdDev_set)

    def __init__(self):
        this = _cffirmware.new_tdoaMeasurement_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_tdoaMeasurement_t
    __del__ = lambda self: None
tdoaMeasurement_t_swigregister = _cffirmware.tdoaMeasurement_t_swigregister
tdoaMeasurement_t_swigregister(tdoaMeasurement_t)

class baro_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, baro_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, baro_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pressure"] = _cffirmware.baro_t_pressure_set
    __swig_getmethods__["pressure"] = _cffirmware.baro_t_pressure_get
    if _newclass:
        pressure = _swig_property(_cffirmware.baro_t_pressure_get, _cffirmware.baro_t_pressure_set)
    __swig_setmethods__["temperature"] = _cffirmware.baro_t_temperature_set
    __swig_getmethods__["temperature"] = _cffirmware.baro_t_temperature_get
    if _newclass:
        temperature = _swig_property(_cffirmware.baro_t_temperature_get, _cffirmware.baro_t_temperature_set)
    __swig_setmethods__["asl"] = _cffirmware.baro_t_asl_set
    __swig_getmethods__["asl"] = _cffirmware.baro_t_asl_get
    if _newclass:
        asl = _swig_property(_cffirmware.baro_t_asl_get, _cffirmware.baro_t_asl_set)

    def __init__(self):
        this = _cffirmware.new_baro_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_baro_t
    __del__ = lambda self: None
baro_t_swigregister = _cffirmware.baro_t_swigregister
baro_t_swigregister(baro_t)

class positionMeasurement_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, positionMeasurement_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, positionMeasurement_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _cffirmware.positionMeasurement_t_x_set
    __swig_getmethods__["x"] = _cffirmware.positionMeasurement_t_x_get
    if _newclass:
        x = _swig_property(_cffirmware.positionMeasurement_t_x_get, _cffirmware.positionMeasurement_t_x_set)
    __swig_setmethods__["y"] = _cffirmware.positionMeasurement_t_y_set
    __swig_getmethods__["y"] = _cffirmware.positionMeasurement_t_y_get
    if _newclass:
        y = _swig_property(_cffirmware.positionMeasurement_t_y_get, _cffirmware.positionMeasurement_t_y_set)
    __swig_setmethods__["z"] = _cffirmware.positionMeasurement_t_z_set
    __swig_getmethods__["z"] = _cffirmware.positionMeasurement_t_z_get
    if _newclass:
        z = _swig_property(_cffirmware.positionMeasurement_t_z_get, _cffirmware.positionMeasurement_t_z_set)
    __swig_setmethods__["pos"] = _cffirmware.positionMeasurement_t_pos_set
    __swig_getmethods__["pos"] = _cffirmware.positionMeasurement_t_pos_get
    if _newclass:
        pos = _swig_property(_cffirmware.positionMeasurement_t_pos_get, _cffirmware.positionMeasurement_t_pos_set)
    __swig_setmethods__["stdDev"] = _cffirmware.positionMeasurement_t_stdDev_set
    __swig_getmethods__["stdDev"] = _cffirmware.positionMeasurement_t_stdDev_get
    if _newclass:
        stdDev = _swig_property(_cffirmware.positionMeasurement_t_stdDev_get, _cffirmware.positionMeasurement_t_stdDev_set)

    def __init__(self):
        this = _cffirmware.new_positionMeasurement_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_positionMeasurement_t
    __del__ = lambda self: None
positionMeasurement_t_swigregister = _cffirmware.positionMeasurement_t_swigregister
positionMeasurement_t_swigregister(positionMeasurement_t)

class poseMeasurement_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, poseMeasurement_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, poseMeasurement_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _cffirmware.poseMeasurement_t_x_set
    __swig_getmethods__["x"] = _cffirmware.poseMeasurement_t_x_get
    if _newclass:
        x = _swig_property(_cffirmware.poseMeasurement_t_x_get, _cffirmware.poseMeasurement_t_x_set)
    __swig_setmethods__["y"] = _cffirmware.poseMeasurement_t_y_set
    __swig_getmethods__["y"] = _cffirmware.poseMeasurement_t_y_get
    if _newclass:
        y = _swig_property(_cffirmware.poseMeasurement_t_y_get, _cffirmware.poseMeasurement_t_y_set)
    __swig_setmethods__["z"] = _cffirmware.poseMeasurement_t_z_set
    __swig_getmethods__["z"] = _cffirmware.poseMeasurement_t_z_get
    if _newclass:
        z = _swig_property(_cffirmware.poseMeasurement_t_z_get, _cffirmware.poseMeasurement_t_z_set)
    __swig_setmethods__["pos"] = _cffirmware.poseMeasurement_t_pos_set
    __swig_getmethods__["pos"] = _cffirmware.poseMeasurement_t_pos_get
    if _newclass:
        pos = _swig_property(_cffirmware.poseMeasurement_t_pos_get, _cffirmware.poseMeasurement_t_pos_set)
    __swig_setmethods__["quat"] = _cffirmware.poseMeasurement_t_quat_set
    __swig_getmethods__["quat"] = _cffirmware.poseMeasurement_t_quat_get
    if _newclass:
        quat = _swig_property(_cffirmware.poseMeasurement_t_quat_get, _cffirmware.poseMeasurement_t_quat_set)
    __swig_setmethods__["stdDevPos"] = _cffirmware.poseMeasurement_t_stdDevPos_set
    __swig_getmethods__["stdDevPos"] = _cffirmware.poseMeasurement_t_stdDevPos_get
    if _newclass:
        stdDevPos = _swig_property(_cffirmware.poseMeasurement_t_stdDevPos_get, _cffirmware.poseMeasurement_t_stdDevPos_set)
    __swig_setmethods__["stdDevQuat"] = _cffirmware.poseMeasurement_t_stdDevQuat_set
    __swig_getmethods__["stdDevQuat"] = _cffirmware.poseMeasurement_t_stdDevQuat_get
    if _newclass:
        stdDevQuat = _swig_property(_cffirmware.poseMeasurement_t_stdDevQuat_get, _cffirmware.poseMeasurement_t_stdDevQuat_set)

    def __init__(self):
        this = _cffirmware.new_poseMeasurement_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_poseMeasurement_t
    __del__ = lambda self: None
poseMeasurement_t_swigregister = _cffirmware.poseMeasurement_t_swigregister
poseMeasurement_t_swigregister(poseMeasurement_t)

class distanceMeasurement_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, distanceMeasurement_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, distanceMeasurement_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _cffirmware.distanceMeasurement_t_x_set
    __swig_getmethods__["x"] = _cffirmware.distanceMeasurement_t_x_get
    if _newclass:
        x = _swig_property(_cffirmware.distanceMeasurement_t_x_get, _cffirmware.distanceMeasurement_t_x_set)
    __swig_setmethods__["y"] = _cffirmware.distanceMeasurement_t_y_set
    __swig_getmethods__["y"] = _cffirmware.distanceMeasurement_t_y_get
    if _newclass:
        y = _swig_property(_cffirmware.distanceMeasurement_t_y_get, _cffirmware.distanceMeasurement_t_y_set)
    __swig_setmethods__["z"] = _cffirmware.distanceMeasurement_t_z_set
    __swig_getmethods__["z"] = _cffirmware.distanceMeasurement_t_z_get
    if _newclass:
        z = _swig_property(_cffirmware.distanceMeasurement_t_z_get, _cffirmware.distanceMeasurement_t_z_set)
    __swig_setmethods__["pos"] = _cffirmware.distanceMeasurement_t_pos_set
    __swig_getmethods__["pos"] = _cffirmware.distanceMeasurement_t_pos_get
    if _newclass:
        pos = _swig_property(_cffirmware.distanceMeasurement_t_pos_get, _cffirmware.distanceMeasurement_t_pos_set)
    __swig_setmethods__["distance"] = _cffirmware.distanceMeasurement_t_distance_set
    __swig_getmethods__["distance"] = _cffirmware.distanceMeasurement_t_distance_get
    if _newclass:
        distance = _swig_property(_cffirmware.distanceMeasurement_t_distance_get, _cffirmware.distanceMeasurement_t_distance_set)
    __swig_setmethods__["stdDev"] = _cffirmware.distanceMeasurement_t_stdDev_set
    __swig_getmethods__["stdDev"] = _cffirmware.distanceMeasurement_t_stdDev_get
    if _newclass:
        stdDev = _swig_property(_cffirmware.distanceMeasurement_t_stdDev_get, _cffirmware.distanceMeasurement_t_stdDev_set)

    def __init__(self):
        this = _cffirmware.new_distanceMeasurement_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_distanceMeasurement_t
    __del__ = lambda self: None
distanceMeasurement_t_swigregister = _cffirmware.distanceMeasurement_t_swigregister
distanceMeasurement_t_swigregister(distanceMeasurement_t)

class zDistance_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, zDistance_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, zDistance_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _cffirmware.zDistance_t_timestamp_set
    __swig_getmethods__["timestamp"] = _cffirmware.zDistance_t_timestamp_get
    if _newclass:
        timestamp = _swig_property(_cffirmware.zDistance_t_timestamp_get, _cffirmware.zDistance_t_timestamp_set)
    __swig_setmethods__["distance"] = _cffirmware.zDistance_t_distance_set
    __swig_getmethods__["distance"] = _cffirmware.zDistance_t_distance_get
    if _newclass:
        distance = _swig_property(_cffirmware.zDistance_t_distance_get, _cffirmware.zDistance_t_distance_set)

    def __init__(self):
        this = _cffirmware.new_zDistance_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_zDistance_t
    __del__ = lambda self: None
zDistance_t_swigregister = _cffirmware.zDistance_t_swigregister
zDistance_t_swigregister(zDistance_t)

class sensorData_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sensorData_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sensorData_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["acc"] = _cffirmware.sensorData_t_acc_set
    __swig_getmethods__["acc"] = _cffirmware.sensorData_t_acc_get
    if _newclass:
        acc = _swig_property(_cffirmware.sensorData_t_acc_get, _cffirmware.sensorData_t_acc_set)
    __swig_setmethods__["gyro"] = _cffirmware.sensorData_t_gyro_set
    __swig_getmethods__["gyro"] = _cffirmware.sensorData_t_gyro_get
    if _newclass:
        gyro = _swig_property(_cffirmware.sensorData_t_gyro_get, _cffirmware.sensorData_t_gyro_set)
    __swig_setmethods__["mag"] = _cffirmware.sensorData_t_mag_set
    __swig_getmethods__["mag"] = _cffirmware.sensorData_t_mag_get
    if _newclass:
        mag = _swig_property(_cffirmware.sensorData_t_mag_get, _cffirmware.sensorData_t_mag_set)
    __swig_setmethods__["baro"] = _cffirmware.sensorData_t_baro_set
    __swig_getmethods__["baro"] = _cffirmware.sensorData_t_baro_get
    if _newclass:
        baro = _swig_property(_cffirmware.sensorData_t_baro_get, _cffirmware.sensorData_t_baro_set)
    __swig_setmethods__["interruptTimestamp"] = _cffirmware.sensorData_t_interruptTimestamp_set
    __swig_getmethods__["interruptTimestamp"] = _cffirmware.sensorData_t_interruptTimestamp_get
    if _newclass:
        interruptTimestamp = _swig_property(_cffirmware.sensorData_t_interruptTimestamp_get, _cffirmware.sensorData_t_interruptTimestamp_set)

    def __init__(self):
        this = _cffirmware.new_sensorData_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_sensorData_t
    __del__ = lambda self: None
sensorData_t_swigregister = _cffirmware.sensorData_t_swigregister
sensorData_t_swigregister(sensorData_t)

class state_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, state_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, state_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attitude"] = _cffirmware.state_t_attitude_set
    __swig_getmethods__["attitude"] = _cffirmware.state_t_attitude_get
    if _newclass:
        attitude = _swig_property(_cffirmware.state_t_attitude_get, _cffirmware.state_t_attitude_set)
    __swig_setmethods__["attitudeQuaternion"] = _cffirmware.state_t_attitudeQuaternion_set
    __swig_getmethods__["attitudeQuaternion"] = _cffirmware.state_t_attitudeQuaternion_get
    if _newclass:
        attitudeQuaternion = _swig_property(_cffirmware.state_t_attitudeQuaternion_get, _cffirmware.state_t_attitudeQuaternion_set)
    __swig_setmethods__["position"] = _cffirmware.state_t_position_set
    __swig_getmethods__["position"] = _cffirmware.state_t_position_get
    if _newclass:
        position = _swig_property(_cffirmware.state_t_position_get, _cffirmware.state_t_position_set)
    __swig_setmethods__["velocity"] = _cffirmware.state_t_velocity_set
    __swig_getmethods__["velocity"] = _cffirmware.state_t_velocity_get
    if _newclass:
        velocity = _swig_property(_cffirmware.state_t_velocity_get, _cffirmware.state_t_velocity_set)
    __swig_setmethods__["acc"] = _cffirmware.state_t_acc_set
    __swig_getmethods__["acc"] = _cffirmware.state_t_acc_get
    if _newclass:
        acc = _swig_property(_cffirmware.state_t_acc_get, _cffirmware.state_t_acc_set)

    def __init__(self):
        this = _cffirmware.new_state_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_state_t
    __del__ = lambda self: None
state_t_swigregister = _cffirmware.state_t_swigregister
state_t_swigregister(state_t)

class control_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, control_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, control_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["roll"] = _cffirmware.control_t_roll_set
    __swig_getmethods__["roll"] = _cffirmware.control_t_roll_get
    if _newclass:
        roll = _swig_property(_cffirmware.control_t_roll_get, _cffirmware.control_t_roll_set)
    __swig_setmethods__["pitch"] = _cffirmware.control_t_pitch_set
    __swig_getmethods__["pitch"] = _cffirmware.control_t_pitch_get
    if _newclass:
        pitch = _swig_property(_cffirmware.control_t_pitch_get, _cffirmware.control_t_pitch_set)
    __swig_setmethods__["yaw"] = _cffirmware.control_t_yaw_set
    __swig_getmethods__["yaw"] = _cffirmware.control_t_yaw_get
    if _newclass:
        yaw = _swig_property(_cffirmware.control_t_yaw_get, _cffirmware.control_t_yaw_set)
    __swig_setmethods__["thrust"] = _cffirmware.control_t_thrust_set
    __swig_getmethods__["thrust"] = _cffirmware.control_t_thrust_get
    if _newclass:
        thrust = _swig_property(_cffirmware.control_t_thrust_get, _cffirmware.control_t_thrust_set)

    def __init__(self):
        this = _cffirmware.new_control_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_control_t
    __del__ = lambda self: None
control_t_swigregister = _cffirmware.control_t_swigregister
control_t_swigregister(control_t)

modeDisable = _cffirmware.modeDisable
modeAbs = _cffirmware.modeAbs
modeVelocity = _cffirmware.modeVelocity
class setpoint_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, setpoint_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, setpoint_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _cffirmware.setpoint_t_timestamp_set
    __swig_getmethods__["timestamp"] = _cffirmware.setpoint_t_timestamp_get
    if _newclass:
        timestamp = _swig_property(_cffirmware.setpoint_t_timestamp_get, _cffirmware.setpoint_t_timestamp_set)
    __swig_setmethods__["attitude"] = _cffirmware.setpoint_t_attitude_set
    __swig_getmethods__["attitude"] = _cffirmware.setpoint_t_attitude_get
    if _newclass:
        attitude = _swig_property(_cffirmware.setpoint_t_attitude_get, _cffirmware.setpoint_t_attitude_set)
    __swig_setmethods__["attitudeRate"] = _cffirmware.setpoint_t_attitudeRate_set
    __swig_getmethods__["attitudeRate"] = _cffirmware.setpoint_t_attitudeRate_get
    if _newclass:
        attitudeRate = _swig_property(_cffirmware.setpoint_t_attitudeRate_get, _cffirmware.setpoint_t_attitudeRate_set)
    __swig_setmethods__["attitudeQuaternion"] = _cffirmware.setpoint_t_attitudeQuaternion_set
    __swig_getmethods__["attitudeQuaternion"] = _cffirmware.setpoint_t_attitudeQuaternion_get
    if _newclass:
        attitudeQuaternion = _swig_property(_cffirmware.setpoint_t_attitudeQuaternion_get, _cffirmware.setpoint_t_attitudeQuaternion_set)
    __swig_setmethods__["thrust"] = _cffirmware.setpoint_t_thrust_set
    __swig_getmethods__["thrust"] = _cffirmware.setpoint_t_thrust_get
    if _newclass:
        thrust = _swig_property(_cffirmware.setpoint_t_thrust_get, _cffirmware.setpoint_t_thrust_set)
    __swig_setmethods__["position"] = _cffirmware.setpoint_t_position_set
    __swig_getmethods__["position"] = _cffirmware.setpoint_t_position_get
    if _newclass:
        position = _swig_property(_cffirmware.setpoint_t_position_get, _cffirmware.setpoint_t_position_set)
    __swig_setmethods__["velocity"] = _cffirmware.setpoint_t_velocity_set
    __swig_getmethods__["velocity"] = _cffirmware.setpoint_t_velocity_get
    if _newclass:
        velocity = _swig_property(_cffirmware.setpoint_t_velocity_get, _cffirmware.setpoint_t_velocity_set)
    __swig_setmethods__["acceleration"] = _cffirmware.setpoint_t_acceleration_set
    __swig_getmethods__["acceleration"] = _cffirmware.setpoint_t_acceleration_get
    if _newclass:
        acceleration = _swig_property(_cffirmware.setpoint_t_acceleration_get, _cffirmware.setpoint_t_acceleration_set)
    __swig_setmethods__["velocity_body"] = _cffirmware.setpoint_t_velocity_body_set
    __swig_getmethods__["velocity_body"] = _cffirmware.setpoint_t_velocity_body_get
    if _newclass:
        velocity_body = _swig_property(_cffirmware.setpoint_t_velocity_body_get, _cffirmware.setpoint_t_velocity_body_set)
    __swig_getmethods__["mode"] = _cffirmware.setpoint_t_mode_get
    if _newclass:
        mode = _swig_property(_cffirmware.setpoint_t_mode_get)

    def __init__(self):
        this = _cffirmware.new_setpoint_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_setpoint_t
    __del__ = lambda self: None
setpoint_t_swigregister = _cffirmware.setpoint_t_swigregister
setpoint_t_swigregister(setpoint_t)

class setpoint_s_mode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, setpoint_s_mode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, setpoint_s_mode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _cffirmware.setpoint_s_mode_x_set
    __swig_getmethods__["x"] = _cffirmware.setpoint_s_mode_x_get
    if _newclass:
        x = _swig_property(_cffirmware.setpoint_s_mode_x_get, _cffirmware.setpoint_s_mode_x_set)
    __swig_setmethods__["y"] = _cffirmware.setpoint_s_mode_y_set
    __swig_getmethods__["y"] = _cffirmware.setpoint_s_mode_y_get
    if _newclass:
        y = _swig_property(_cffirmware.setpoint_s_mode_y_get, _cffirmware.setpoint_s_mode_y_set)
    __swig_setmethods__["z"] = _cffirmware.setpoint_s_mode_z_set
    __swig_getmethods__["z"] = _cffirmware.setpoint_s_mode_z_get
    if _newclass:
        z = _swig_property(_cffirmware.setpoint_s_mode_z_get, _cffirmware.setpoint_s_mode_z_set)
    __swig_setmethods__["roll"] = _cffirmware.setpoint_s_mode_roll_set
    __swig_getmethods__["roll"] = _cffirmware.setpoint_s_mode_roll_get
    if _newclass:
        roll = _swig_property(_cffirmware.setpoint_s_mode_roll_get, _cffirmware.setpoint_s_mode_roll_set)
    __swig_setmethods__["pitch"] = _cffirmware.setpoint_s_mode_pitch_set
    __swig_getmethods__["pitch"] = _cffirmware.setpoint_s_mode_pitch_get
    if _newclass:
        pitch = _swig_property(_cffirmware.setpoint_s_mode_pitch_get, _cffirmware.setpoint_s_mode_pitch_set)
    __swig_setmethods__["yaw"] = _cffirmware.setpoint_s_mode_yaw_set
    __swig_getmethods__["yaw"] = _cffirmware.setpoint_s_mode_yaw_get
    if _newclass:
        yaw = _swig_property(_cffirmware.setpoint_s_mode_yaw_get, _cffirmware.setpoint_s_mode_yaw_set)
    __swig_setmethods__["quat"] = _cffirmware.setpoint_s_mode_quat_set
    __swig_getmethods__["quat"] = _cffirmware.setpoint_s_mode_quat_get
    if _newclass:
        quat = _swig_property(_cffirmware.setpoint_s_mode_quat_get, _cffirmware.setpoint_s_mode_quat_set)

    def __init__(self):
        this = _cffirmware.new_setpoint_s_mode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_setpoint_s_mode
    __del__ = lambda self: None
setpoint_s_mode_swigregister = _cffirmware.setpoint_s_mode_swigregister
setpoint_s_mode_swigregister(setpoint_s_mode)

class estimate_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, estimate_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, estimate_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _cffirmware.estimate_t_timestamp_set
    __swig_getmethods__["timestamp"] = _cffirmware.estimate_t_timestamp_get
    if _newclass:
        timestamp = _swig_property(_cffirmware.estimate_t_timestamp_get, _cffirmware.estimate_t_timestamp_set)
    __swig_setmethods__["position"] = _cffirmware.estimate_t_position_set
    __swig_getmethods__["position"] = _cffirmware.estimate_t_position_get
    if _newclass:
        position = _swig_property(_cffirmware.estimate_t_position_get, _cffirmware.estimate_t_position_set)

    def __init__(self):
        this = _cffirmware.new_estimate_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_estimate_t
    __del__ = lambda self: None
estimate_t_swigregister = _cffirmware.estimate_t_swigregister
estimate_t_swigregister(estimate_t)

class setpointZ_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, setpointZ_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, setpointZ_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["z"] = _cffirmware.setpointZ_t_z_set
    __swig_getmethods__["z"] = _cffirmware.setpointZ_t_z_get
    if _newclass:
        z = _swig_property(_cffirmware.setpointZ_t_z_get, _cffirmware.setpointZ_t_z_set)
    __swig_setmethods__["isUpdate"] = _cffirmware.setpointZ_t_isUpdate_set
    __swig_getmethods__["isUpdate"] = _cffirmware.setpointZ_t_isUpdate_get
    if _newclass:
        isUpdate = _swig_property(_cffirmware.setpointZ_t_isUpdate_get, _cffirmware.setpointZ_t_isUpdate_set)

    def __init__(self):
        this = _cffirmware.new_setpointZ_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_setpointZ_t
    __del__ = lambda self: None
setpointZ_t_swigregister = _cffirmware.setpointZ_t_swigregister
setpointZ_t_swigregister(setpointZ_t)

class flowMeasurement_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flowMeasurement_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flowMeasurement_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _cffirmware.flowMeasurement_t_timestamp_set
    __swig_getmethods__["timestamp"] = _cffirmware.flowMeasurement_t_timestamp_get
    if _newclass:
        timestamp = _swig_property(_cffirmware.flowMeasurement_t_timestamp_get, _cffirmware.flowMeasurement_t_timestamp_set)
    __swig_setmethods__["dpixelx"] = _cffirmware.flowMeasurement_t_dpixelx_set
    __swig_getmethods__["dpixelx"] = _cffirmware.flowMeasurement_t_dpixelx_get
    if _newclass:
        dpixelx = _swig_property(_cffirmware.flowMeasurement_t_dpixelx_get, _cffirmware.flowMeasurement_t_dpixelx_set)
    __swig_setmethods__["dpixely"] = _cffirmware.flowMeasurement_t_dpixely_set
    __swig_getmethods__["dpixely"] = _cffirmware.flowMeasurement_t_dpixely_get
    if _newclass:
        dpixely = _swig_property(_cffirmware.flowMeasurement_t_dpixely_get, _cffirmware.flowMeasurement_t_dpixely_set)
    __swig_setmethods__["dpixel"] = _cffirmware.flowMeasurement_t_dpixel_set
    __swig_getmethods__["dpixel"] = _cffirmware.flowMeasurement_t_dpixel_get
    if _newclass:
        dpixel = _swig_property(_cffirmware.flowMeasurement_t_dpixel_get, _cffirmware.flowMeasurement_t_dpixel_set)
    __swig_setmethods__["stdDevX"] = _cffirmware.flowMeasurement_t_stdDevX_set
    __swig_getmethods__["stdDevX"] = _cffirmware.flowMeasurement_t_stdDevX_get
    if _newclass:
        stdDevX = _swig_property(_cffirmware.flowMeasurement_t_stdDevX_get, _cffirmware.flowMeasurement_t_stdDevX_set)
    __swig_setmethods__["stdDevY"] = _cffirmware.flowMeasurement_t_stdDevY_set
    __swig_getmethods__["stdDevY"] = _cffirmware.flowMeasurement_t_stdDevY_get
    if _newclass:
        stdDevY = _swig_property(_cffirmware.flowMeasurement_t_stdDevY_get, _cffirmware.flowMeasurement_t_stdDevY_set)
    __swig_setmethods__["dt"] = _cffirmware.flowMeasurement_t_dt_set
    __swig_getmethods__["dt"] = _cffirmware.flowMeasurement_t_dt_get
    if _newclass:
        dt = _swig_property(_cffirmware.flowMeasurement_t_dt_get, _cffirmware.flowMeasurement_t_dt_set)

    def __init__(self):
        this = _cffirmware.new_flowMeasurement_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_flowMeasurement_t
    __del__ = lambda self: None
flowMeasurement_t_swigregister = _cffirmware.flowMeasurement_t_swigregister
flowMeasurement_t_swigregister(flowMeasurement_t)

class tofMeasurement_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tofMeasurement_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tofMeasurement_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _cffirmware.tofMeasurement_t_timestamp_set
    __swig_getmethods__["timestamp"] = _cffirmware.tofMeasurement_t_timestamp_get
    if _newclass:
        timestamp = _swig_property(_cffirmware.tofMeasurement_t_timestamp_get, _cffirmware.tofMeasurement_t_timestamp_set)
    __swig_setmethods__["distance"] = _cffirmware.tofMeasurement_t_distance_set
    __swig_getmethods__["distance"] = _cffirmware.tofMeasurement_t_distance_get
    if _newclass:
        distance = _swig_property(_cffirmware.tofMeasurement_t_distance_get, _cffirmware.tofMeasurement_t_distance_set)
    __swig_setmethods__["stdDev"] = _cffirmware.tofMeasurement_t_stdDev_set
    __swig_getmethods__["stdDev"] = _cffirmware.tofMeasurement_t_stdDev_get
    if _newclass:
        stdDev = _swig_property(_cffirmware.tofMeasurement_t_stdDev_get, _cffirmware.tofMeasurement_t_stdDev_set)

    def __init__(self):
        this = _cffirmware.new_tofMeasurement_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_tofMeasurement_t
    __del__ = lambda self: None
tofMeasurement_t_swigregister = _cffirmware.tofMeasurement_t_swigregister
tofMeasurement_t_swigregister(tofMeasurement_t)

class heightMeasurement_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, heightMeasurement_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, heightMeasurement_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _cffirmware.heightMeasurement_t_timestamp_set
    __swig_getmethods__["timestamp"] = _cffirmware.heightMeasurement_t_timestamp_get
    if _newclass:
        timestamp = _swig_property(_cffirmware.heightMeasurement_t_timestamp_get, _cffirmware.heightMeasurement_t_timestamp_set)
    __swig_setmethods__["height"] = _cffirmware.heightMeasurement_t_height_set
    __swig_getmethods__["height"] = _cffirmware.heightMeasurement_t_height_get
    if _newclass:
        height = _swig_property(_cffirmware.heightMeasurement_t_height_get, _cffirmware.heightMeasurement_t_height_set)
    __swig_setmethods__["stdDev"] = _cffirmware.heightMeasurement_t_stdDev_set
    __swig_getmethods__["stdDev"] = _cffirmware.heightMeasurement_t_stdDev_get
    if _newclass:
        stdDev = _swig_property(_cffirmware.heightMeasurement_t_stdDev_get, _cffirmware.heightMeasurement_t_stdDev_set)

    def __init__(self):
        this = _cffirmware.new_heightMeasurement_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_heightMeasurement_t
    __del__ = lambda self: None
heightMeasurement_t_swigregister = _cffirmware.heightMeasurement_t_swigregister
heightMeasurement_t_swigregister(heightMeasurement_t)

class yawErrorMeasurement_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, yawErrorMeasurement_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, yawErrorMeasurement_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _cffirmware.yawErrorMeasurement_t_timestamp_set
    __swig_getmethods__["timestamp"] = _cffirmware.yawErrorMeasurement_t_timestamp_get
    if _newclass:
        timestamp = _swig_property(_cffirmware.yawErrorMeasurement_t_timestamp_get, _cffirmware.yawErrorMeasurement_t_timestamp_set)
    __swig_setmethods__["yawError"] = _cffirmware.yawErrorMeasurement_t_yawError_set
    __swig_getmethods__["yawError"] = _cffirmware.yawErrorMeasurement_t_yawError_get
    if _newclass:
        yawError = _swig_property(_cffirmware.yawErrorMeasurement_t_yawError_get, _cffirmware.yawErrorMeasurement_t_yawError_set)
    __swig_setmethods__["stdDev"] = _cffirmware.yawErrorMeasurement_t_stdDev_set
    __swig_getmethods__["stdDev"] = _cffirmware.yawErrorMeasurement_t_stdDev_get
    if _newclass:
        stdDev = _swig_property(_cffirmware.yawErrorMeasurement_t_stdDev_get, _cffirmware.yawErrorMeasurement_t_stdDev_set)

    def __init__(self):
        this = _cffirmware.new_yawErrorMeasurement_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_yawErrorMeasurement_t
    __del__ = lambda self: None
yawErrorMeasurement_t_swigregister = _cffirmware.yawErrorMeasurement_t_swigregister
yawErrorMeasurement_t_swigregister(yawErrorMeasurement_t)

class sweepAngleMeasurement_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sweepAngleMeasurement_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sweepAngleMeasurement_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _cffirmware.sweepAngleMeasurement_t_timestamp_set
    __swig_getmethods__["timestamp"] = _cffirmware.sweepAngleMeasurement_t_timestamp_get
    if _newclass:
        timestamp = _swig_property(_cffirmware.sweepAngleMeasurement_t_timestamp_get, _cffirmware.sweepAngleMeasurement_t_timestamp_set)
    __swig_setmethods__["sensorPos"] = _cffirmware.sweepAngleMeasurement_t_sensorPos_set
    __swig_getmethods__["sensorPos"] = _cffirmware.sweepAngleMeasurement_t_sensorPos_get
    if _newclass:
        sensorPos = _swig_property(_cffirmware.sweepAngleMeasurement_t_sensorPos_get, _cffirmware.sweepAngleMeasurement_t_sensorPos_set)
    __swig_setmethods__["rotorPos"] = _cffirmware.sweepAngleMeasurement_t_rotorPos_set
    __swig_getmethods__["rotorPos"] = _cffirmware.sweepAngleMeasurement_t_rotorPos_get
    if _newclass:
        rotorPos = _swig_property(_cffirmware.sweepAngleMeasurement_t_rotorPos_get, _cffirmware.sweepAngleMeasurement_t_rotorPos_set)
    __swig_setmethods__["rotorRot"] = _cffirmware.sweepAngleMeasurement_t_rotorRot_set
    __swig_getmethods__["rotorRot"] = _cffirmware.sweepAngleMeasurement_t_rotorRot_get
    if _newclass:
        rotorRot = _swig_property(_cffirmware.sweepAngleMeasurement_t_rotorRot_get, _cffirmware.sweepAngleMeasurement_t_rotorRot_set)
    __swig_setmethods__["rotorRotInv"] = _cffirmware.sweepAngleMeasurement_t_rotorRotInv_set
    __swig_getmethods__["rotorRotInv"] = _cffirmware.sweepAngleMeasurement_t_rotorRotInv_get
    if _newclass:
        rotorRotInv = _swig_property(_cffirmware.sweepAngleMeasurement_t_rotorRotInv_get, _cffirmware.sweepAngleMeasurement_t_rotorRotInv_set)
    __swig_setmethods__["t"] = _cffirmware.sweepAngleMeasurement_t_t_set
    __swig_getmethods__["t"] = _cffirmware.sweepAngleMeasurement_t_t_get
    if _newclass:
        t = _swig_property(_cffirmware.sweepAngleMeasurement_t_t_get, _cffirmware.sweepAngleMeasurement_t_t_set)
    __swig_setmethods__["measuredSweepAngle"] = _cffirmware.sweepAngleMeasurement_t_measuredSweepAngle_set
    __swig_getmethods__["measuredSweepAngle"] = _cffirmware.sweepAngleMeasurement_t_measuredSweepAngle_get
    if _newclass:
        measuredSweepAngle = _swig_property(_cffirmware.sweepAngleMeasurement_t_measuredSweepAngle_get, _cffirmware.sweepAngleMeasurement_t_measuredSweepAngle_set)
    __swig_setmethods__["stdDev"] = _cffirmware.sweepAngleMeasurement_t_stdDev_set
    __swig_getmethods__["stdDev"] = _cffirmware.sweepAngleMeasurement_t_stdDev_get
    if _newclass:
        stdDev = _swig_property(_cffirmware.sweepAngleMeasurement_t_stdDev_get, _cffirmware.sweepAngleMeasurement_t_stdDev_set)
    __swig_setmethods__["calib"] = _cffirmware.sweepAngleMeasurement_t_calib_set
    __swig_getmethods__["calib"] = _cffirmware.sweepAngleMeasurement_t_calib_get
    if _newclass:
        calib = _swig_property(_cffirmware.sweepAngleMeasurement_t_calib_get, _cffirmware.sweepAngleMeasurement_t_calib_set)
    __swig_setmethods__["calibrationMeasurementModel"] = _cffirmware.sweepAngleMeasurement_t_calibrationMeasurementModel_set
    __swig_getmethods__["calibrationMeasurementModel"] = _cffirmware.sweepAngleMeasurement_t_calibrationMeasurementModel_get
    if _newclass:
        calibrationMeasurementModel = _swig_property(_cffirmware.sweepAngleMeasurement_t_calibrationMeasurementModel_get, _cffirmware.sweepAngleMeasurement_t_calibrationMeasurementModel_set)

    def __init__(self):
        this = _cffirmware.new_sweepAngleMeasurement_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cffirmware.delete_sweepAngleMeasurement_t
    __del__ = lambda self: None
sweepAngleMeasurement_t_swigregister = _cffirmware.sweepAngleMeasurement_t_swigregister
sweepAngleMeasurement_t_swigregister(sweepAngleMeasurement_t)

RATE_1000_HZ = _cffirmware.RATE_1000_HZ
RATE_500_HZ = _cffirmware.RATE_500_HZ
RATE_250_HZ = _cffirmware.RATE_250_HZ
RATE_100_HZ = _cffirmware.RATE_100_HZ
RATE_50_HZ = _cffirmware.RATE_50_HZ
RATE_25_HZ = _cffirmware.RATE_25_HZ
RATE_MAIN_LOOP = _cffirmware.RATE_MAIN_LOOP
ATTITUDE_RATE = _cffirmware.ATTITUDE_RATE
POSITION_RATE = _cffirmware.POSITION_RATE

def poly4d_set(poly, dim, coef, val):
    return _cffirmware.poly4d_set(poly, dim, coef, val)
poly4d_set = _cffirmware.poly4d_set

def poly4d_get(poly, dim, coef):
    return _cffirmware.poly4d_get(poly, dim, coef)
poly4d_get = _cffirmware.poly4d_get

def pp_get_piece(pp, i):
    return _cffirmware.pp_get_piece(pp, i)
pp_get_piece = _cffirmware.pp_get_piece

def malloc_poly4d(size):
    return _cffirmware.malloc_poly4d(size)
malloc_poly4d = _cffirmware.malloc_poly4d

def vec2svec(v):
    return _cffirmware.vec2svec(v)
vec2svec = _cffirmware.vec2svec

def svec2vec(v):
    return _cffirmware.svec2vec(v)
svec2vec = _cffirmware.svec2vec

def collisionAvoidanceUpdateSetpointWrap(params, collisionState, nOthers, setpoint, sensorData, state):
    return _cffirmware.collisionAvoidanceUpdateSetpointWrap(params, collisionState, nOthers, setpoint, sensorData, state)
collisionAvoidanceUpdateSetpointWrap = _cffirmware.collisionAvoidanceUpdateSetpointWrap

import numpy as np

# This file is compatible with both classic and new-style classes.


